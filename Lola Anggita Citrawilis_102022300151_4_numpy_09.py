# -*- coding: utf-8 -*-
"""4_numpy_09.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lEEaATxaEyCFQONXslUvQtkJw_DuKCJM

# Vector and Matrix with Numpy

Numpy adalah library yang sangat berguna untuk keperluan perhitungan saintifik di Python.

Numpy memiliki tipe data yaitu multidimensional array.
Selain itu, Numpy juga telah dilengkapi beragam fungsi - fungsi populer yang melibatkan perhitungan vektor, matriks.
Antara lain, operasi dasar matriks, aljabar linier, dan statistik.

Pada bagian ini kita akan membahas beberapa fitur yang umum digunakan di Numpy.
"""

# untuk bisa menggunakan numpy, kita perlu import library-nya
import numpy as np # import library numpy selanjutnya saya sebut sebagai np -- biar singkat

"""## Multidimensional Array

Tipe data dalam Numpy biasa disebut sebagai Array.
Array dapat berupa 1-D array, 2-D array, ataupun N-D array.
Array dapat dibuat dengan mengkonversi dari Python List.
"""

# 1D array
prices = np.array([100000, 200000, 300000])

# 2D array
transactions = np.array(
    [[350000, 2],
     [220000, 1],
     [270000, 3]])

"""Untuk mengetahui dimensi dari sebuah array, dapat menggunakan method `.shape`."""

transactions.shape

"""Sedangkan untuk mengetahui tipe data, dapat menggunakan method `.dtype`."""

transactions.dtype

"""### Zeros"""

# membuat array 0
np.zeros((3, 4), dtype=np.float64)

"""### Ones"""

# membuat array 1
np.ones((3, 4), dtype=np.int32)

"""### Eye"""

# membuat matrix identity
np.eye(5, dtype=np.int32)

"""### Random

Method `random` untuk menghasilkan array dengan nilai random.
Terdapat banyak tipe random yang bisa kita gunakan (misal `random.randn` untuk random dengan distribusi standard normal, atau `random.rand` untuk random dengan distribusi uniform.
Penjelasan lebih lengkap dapat dilihat di [sini](https://docs.scipy.org/doc/numpy/reference/routines.random.html).
"""

# random distribusi normal array ukuran 3 x 3
np.random.randn(3, 3)

# random distribusi seragam ukuran 3 x 3
np.random.rand(3, 3)

"""### Array Elements
Ada beberapa cara untuk mengakses elemen dalam sebuah array.
"""

# baris ke-2 kolom ke-1
transactions[1, 0]

"""### slicing"""

# kolom ke-2
transactions[:, 1]

# baris ke-2
transactions[1, :]

# baris ke-1 hingga ke-2, semua kolom
transactions[:2, :]

# baris 1 dan 3, kolom ke-2
transactions[[0, 2], [1]]

"""### Boolean Indexing

Boolean indexing adalah teknik mengakses elemen - elemen yang ada dalam array dengan kondisi tertentu.
Elemen yang dipilih adalah yang memenuhi kondisi yg diberikan (bernilai True).
"""

transactions[transactions[:, 1] > 2]

"""## Math Operations

Numpy menyediakan beragam method untuk melakukan operasi Matematika baik yang bersifat element-wise (per-elemen) atau yang bersifat operasi matriks. Sebagai contoh, di bawah ini saya mempunyai 2 buah array `array_a` dan `array_b`.
"""

array1 = np.array(
    [[1, 2],
     [3, 4]])

array2 = np.array(
    [[5, 6],
     [7, 8]])

"""### Element-wise operations

Penjumlahan
"""

array1 + array2

array1 + 5

"""Pengurangan"""

array1 - array2

"""Perkalian elemen"""

array1 * array2

"""Pembagian elemen"""

array1 / array2

"""Kuadrat elemen dengan menggunakan method `.square`"""

np.square(array1)

"""Akar kuadrat elemen dengan menggunakan method `.sqrt`"""

np.sqrt(array1)

"""### Dot product

Kita bisa menggunakan method `.dot` untuk melakukan operasi perkalian antara 2 buah matriks.
"""

np.dot(array1, array2)

"""### Sum

Method `.sum` digunakan untuk menghitung jumlah seluruh / sebagian elemen.
"""

np.sum(array1)

"""Jumlah seluruh elemen pada axis tertentu (0 = baris, 1 = kolom)"""

np.sum(array1, axis=0)

np.sum(array1, axis=1)

"""### Transpose"""

np.transpose(array1)

"""### Reshape

Method `.reshape` bisa digunakan untuk membentuk ulang sebuah matriks ke dalam ukuran tertentu, sepanjang ukuran baru tersebut masih konsisten dengan ukuran sebelumnya.
"""

np.reshape(array1, (4, 1))

"""## Array Norm"""

# vector norm dari vektor [3, 4]
np.linalg.norm(np.array([3, 4]))

"""## Euclidean Distance"""

# Euclidean distance antara 2 vektor [10, 0] dan [0, 10]
# euclidean distance = norm(vector1 - vector2)
np.linalg.norm(np.array([10, 0]) - np.array([0, 10]))

"""## Looping over Array"""

m = np.array(
    [[1, 2, 3],
     [4, 5, 6],
     [7, 8, 9]])


# loop over row
for row in m:
    print("row ", row)
    for column in row:
        print("column ", column)

"""## Array concatenation

Kita bisa menggabungkan 2 buah matriks baik secara horisontal maupun vertikal.
"""

np.hstack([array1, array2])

np.vstack([array1, array2])

"""## Array Sorting"""

arr = np.array([2, 1, 5, 3, 7, 4, 6, 8])
arr_2d = np.array([[5, 2, 8], [1, 6, 7], [4, 3, 9]])
print(arr)
print(arr_2d)

sorted_arr= np.sort(arr)
print(sorted_arr)

sorted_arr_2d_axis0 = np.sort(arr_2d, axis=0)  # Vertikal
sorted_arr_2d_axis1 = np.sort(arr_2d, axis=1)  # Horizontal
print(sorted_arr_2d_axis0)
print(sorted_arr_2d_axis1)

"""Kita juga bisa mengurutkan elemen - elemen yang ada pada array dan menampilkan indek awalnya, contohnya sebagai berikut."""

print("Array asli:", arr)
sorted_indices = np.argsort(arr)
print("Indeks setelah sorting:", sorted_indices)

sorted_arr_by_indices = arr[sorted_indices]
print("Array setelah diurutkan berdasarkan indeks:", sorted_arr_by_indices)

value = 7
original_position = np.where(arr == value)[0][0]
sorted_position = np.where(sorted_arr_by_indices == value)[0][0]

(original_position, sorted_position)





"""## External Resources

1. [Numpy Documentation](https://docs.scipy.org/doc/numpy/genindex.html)
3. [Numpy Tutorial](https://cs231n.github.io/python-numpy-tutorial/)
"""